module Main where
import Test.Text.ANTLR.Allstar.Grammar
import Text.ANTLR.Allstar.Grammar
import Text.ANTLR.LR1

import Data.Set (fromList, union, empty, Set(..), (\\))
import qualified Data.Set as S
import qualified Data.Map.Strict as M

import System.IO.Unsafe (unsafePerformIO)
import Data.Monoid
import Test.Framework
import Test.Framework.Providers.HUnit
import Test.Framework.Providers.QuickCheck2
import Test.HUnit
import Test.QuickCheck
--import Test.QuickCheck ( Property, quickCheck, (==>)
--  , elements, Arbitrary(..)
--  )
import qualified Test.QuickCheck.Monadic as TQM

uPIO = unsafePerformIO

grm = dragonBook41

testClosure =
  closure grm (S.singleton $ Item (Init "E") [] [NT "E"])
  @?=
  fromList
    [ Item (Init "E")   [] [NT "E"]
    , Item (ItemNT "E") [] [NT "E", T "+", NT "T"]
    , Item (ItemNT "E") [] [NT "T"]
    , Item (ItemNT "T") [] [NT "T", T "*", NT "F"]
    , Item (ItemNT "T") [] [NT "F"]
    , Item (ItemNT "F") [] [T "(", NT "E", T ")"]
    , Item (ItemNT "F") [] [T "id"]
    ]

testKernel =
  kernel (closure grm (S.singleton $ Item (Init "E") [] [NT "E"]))
  @?=
  fromList
    [Item (Init "E") [] [NT "E"]]

newtype Item' = I' Item
  deriving (Eq, Ord, Show)

instance Arbitrary Item' where
  arbitrary = (elements . map I' . S.toList . allItems) grm

c' = closure grm

propClosureClosure :: Set Item' -> Property
propClosureClosure items' = let items = S.map (\(I' is) -> is) items' in True ==>
  (c' . c') items == c' items 

newtype Grammar' = G' (Grammar ())
  deriving (Eq, Ord, Show)

instance Arbitrary Grammar' where
  arbitrary = do
    Positive i <- arbitrary
    Positive j <- arbitrary 
    ns' <- infiniteList :: Gen [NonTerminal]
    ts' <- infiniteList :: Gen [Terminal]
    let ns = fromList $ take i ns'
    let ts = fromList $ take j ts'
    s0 <- elements ns'
    let g = defaultGrammar {ns = ns, ts = ts, s0 = s0}
    let prod = do
          lhs <- elements ns'
          rhs <- listOf (elements $ S.toList $ symbols g)
          return $ (lhs, Prod rhs)
    ps <- suchThat (listOf1 prod) (\ps -> validGrammar $ g { ps = ps })
    return $ G' $ g { ps = ps }

closedItems :: Grammar' -> Property
closedItems (G' g) = True ==> null (S.fold union empty (items g) \\ allItems g)

testItems =
  items grm
  @?=
  empty

main :: IO ()
main = defaultMainWithOpts
  [ testCase "closure" testClosure
  , testCase "kernel"  testKernel
  , testProperty "closure-closure" propClosureClosure
  , testCase "items" testItems
  , testProperty  "closedItems" closedItems
  ] mempty

